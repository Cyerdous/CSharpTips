C# tricks!

Above all else, docs.microsoft.com is your friend.

Abstract Classes Vs. Interfaces
	Abstract Classes allow building default implementations that inheritors can override while interfaces just define those functions.

Nullable types (generics storing null) & ?? operator
	double? num1 = null;
	double num2 = num1 ?? -100; // num2 == -100 because num1 == null
								// ?? operator can be chained
	
	private IList<Foo> _foo;	// automagic instantiation

		public IList<Foo> ListOfFoo 
		{ get { return _foo ?? (_foo = new List<Foo>()); } }
		
		//This is actually how singletons work I think

Operators
	ternary operator
		x = (x==1) ? 2 : 3; 
		is if(x==1) {x = 2;} else {x = 3;}

	null coalescing operator
		int? x = null; //nullable type shown below
		int y = x ?? 0; //y is 0, not null
		is if(x == null) {y = 0;} else {y = x;}

		x ??= 1;
		is if(x == null) {x = 1;}

Default Keyword
	T t = default(T);
		//so bool returns false
		//and int returns 0

Object initializers can be inline
	Employee emp = new Employee 
	{
		Name = "John Smith", 
		StartDate = DateTime.Now()
	};

Http
	using System.Net.Http;
	var http = new HttpClient();
	var response = await http.GetAsync(path);
	if(response.IsSuccessStatusCode)
	{
		return await response.Content.ReadAsStringAsync();
	}
	
	


















